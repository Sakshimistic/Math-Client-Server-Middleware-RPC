# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import math_service_pb2 as math__service__pb2


class MathStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.magicAdd = channel.unary_unary(
                '/math_service.Math/magicAdd',
                request_serializer=math__service__pb2.MagicAddRequest.SerializeToString,
                response_deserializer=math__service__pb2.MagicAddReply.FromString,
                )
        self.magicSubtract = channel.unary_unary(
                '/math_service.Math/magicSubtract',
                request_serializer=math__service__pb2.MagicSubtractRequest.SerializeToString,
                response_deserializer=math__service__pb2.MagicSubtractReply.FromString,
                )
        self.magicFindMin = channel.unary_unary(
                '/math_service.Math/magicFindMin',
                request_serializer=math__service__pb2.MagicFindMinRequest.SerializeToString,
                response_deserializer=math__service__pb2.MagicFindMinReply.FromString,
                )
        self.magicFindMax = channel.unary_unary(
                '/math_service.Math/magicFindMax',
                request_serializer=math__service__pb2.MagicFindMaxRequest.SerializeToString,
                response_deserializer=math__service__pb2.MagicFindMaxReply.FromString,
                )
        self.getOperationCount = channel.unary_unary(
                '/math_service.Math/getOperationCount',
                request_serializer=math__service__pb2.GetOperationCountRequest.SerializeToString,
                response_deserializer=math__service__pb2.GetOperationCountReply.FromString,
                )


class MathServicer(object):
    """Missing associated documentation comment in .proto file."""

    def magicAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def magicSubtract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def magicFindMin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def magicFindMax(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getOperationCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MathServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'magicAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.magicAdd,
                    request_deserializer=math__service__pb2.MagicAddRequest.FromString,
                    response_serializer=math__service__pb2.MagicAddReply.SerializeToString,
            ),
            'magicSubtract': grpc.unary_unary_rpc_method_handler(
                    servicer.magicSubtract,
                    request_deserializer=math__service__pb2.MagicSubtractRequest.FromString,
                    response_serializer=math__service__pb2.MagicSubtractReply.SerializeToString,
            ),
            'magicFindMin': grpc.unary_unary_rpc_method_handler(
                    servicer.magicFindMin,
                    request_deserializer=math__service__pb2.MagicFindMinRequest.FromString,
                    response_serializer=math__service__pb2.MagicFindMinReply.SerializeToString,
            ),
            'magicFindMax': grpc.unary_unary_rpc_method_handler(
                    servicer.magicFindMax,
                    request_deserializer=math__service__pb2.MagicFindMaxRequest.FromString,
                    response_serializer=math__service__pb2.MagicFindMaxReply.SerializeToString,
            ),
            'getOperationCount': grpc.unary_unary_rpc_method_handler(
                    servicer.getOperationCount,
                    request_deserializer=math__service__pb2.GetOperationCountRequest.FromString,
                    response_serializer=math__service__pb2.GetOperationCountReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'math_service.Math', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Math(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def magicAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/math_service.Math/magicAdd',
            math__service__pb2.MagicAddRequest.SerializeToString,
            math__service__pb2.MagicAddReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def magicSubtract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/math_service.Math/magicSubtract',
            math__service__pb2.MagicSubtractRequest.SerializeToString,
            math__service__pb2.MagicSubtractReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def magicFindMin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/math_service.Math/magicFindMin',
            math__service__pb2.MagicFindMinRequest.SerializeToString,
            math__service__pb2.MagicFindMinReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def magicFindMax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/math_service.Math/magicFindMax',
            math__service__pb2.MagicFindMaxRequest.SerializeToString,
            math__service__pb2.MagicFindMaxReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getOperationCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/math_service.Math/getOperationCount',
            math__service__pb2.GetOperationCountRequest.SerializeToString,
            math__service__pb2.GetOperationCountReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
